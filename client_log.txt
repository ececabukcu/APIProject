2024-08-22 15:21:02,614 - ERROR - Failed to retrieve customers: 500 Server Error: INTERNAL SERVER ERROR for url: http://127.0.0.1:5000/customers
2024-08-22 15:21:31,383 - ERROR - Failed to retrieve customers: 500 Server Error: INTERNAL SERVER ERROR for url: http://127.0.0.1:5000/customers
2024-08-22 15:23:49,379 - ERROR - Failed to retrieve customers: 500 Server Error: INTERNAL SERVER ERROR for url: http://127.0.0.1:5000/customers
2024-08-23 14:18:57,207 - INFO - Transaction stored successfully. Response: {'customer': {'key': 1, 'name': 'John Doe', 'variables': {'customerCity': 'New York', 'email': 'john@gmail.com'}}, 'message': 'Customer updated successfully'}
2024-08-23 14:19:02,668 - INFO - Transaction stored successfully. Response: {'customer': {'key': 2, 'name': 'Jane Smith', 'variables': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com'}}, 'message': 'Customer updated successfully'}
2024-08-23 14:19:08,072 - INFO - Transaction stored successfully. Response: {'customer': {'key': 3, 'name': 'Jim Brown', 'variables': {'customerCity': 'Chicago', 'email': 'jim@gmail.com'}}, 'message': 'Customer updated successfully'}
2024-08-23 14:19:08,129 - INFO - Transaction stored successfully. Response: {'customer': {'key': 4, 'name': 'Lisa White', 'variables': {'customerCity': 'Houston', 'email': 'lisa@gmail.com'}}, 'message': 'Customer updated successfully'}
2024-08-23 14:19:13,612 - INFO - Transaction stored successfully. Response: {'customer': {'key': 5, 'name': 'Gary Black', 'variables': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com'}}, 'message': 'Customer updated successfully'}
2024-08-23 14:25:37,120 - INFO - Transaction stored successfully. Response: {'customer': {'key': 1, 'name': 'John Doe', 'variables': {'customerCity': 'New York', 'email': 'john@gmail.com'}}, 'message': 'Customer updated successfully'}
2024-08-23 14:25:42,550 - INFO - Transaction stored successfully. Response: {'customer': {'key': 2, 'name': 'Jane Smith', 'variables': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com'}}, 'message': 'Customer updated successfully'}
2024-08-23 14:25:43,231 - INFO - Transaction stored successfully. Response: {'customer': {'key': 3, 'name': 'Jim Brown', 'variables': {'customerCity': 'Chicago', 'email': 'jim@gmail.com'}}, 'message': 'Customer updated successfully'}
2024-08-23 14:25:48,637 - INFO - Transaction stored successfully. Response: {'customer': {'key': 4, 'name': 'Lisa White', 'variables': {'customerCity': 'Houston', 'email': 'lisa@gmail.com'}}, 'message': 'Customer updated successfully'}
2024-08-23 14:25:54,143 - INFO - Transaction stored successfully. Response: {'customer': {'key': 5, 'name': 'Gary Black', 'variables': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com'}}, 'message': 'Customer updated successfully'}
2024-08-23 16:05:31,080 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'New York', 'email': 'john@gmail.com', 'key': 1, 'name': 'John Doe'}, 'message': 'Customer updated successfully'}
2024-08-23 16:05:31,092 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com', 'key': 2, 'name': 'Jane Smith'}, 'message': 'Customer updated successfully'}
2024-08-23 16:05:31,106 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Chicago', 'email': 'jim@gmail.com', 'key': 3, 'name': 'Jim Brown'}, 'message': 'Customer updated successfully'}
2024-08-23 16:05:31,130 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Houston', 'email': 'lisa@gmail.com', 'key': 4, 'name': 'Lisa White'}, 'message': 'Customer updated successfully'}
2024-08-23 16:05:31,153 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com', 'key': 5, 'name': 'Gary Black'}, 'message': 'Customer updated successfully'}
2024-08-23 16:19:40,679 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'ï¿½st', 'email': 'caa@gmail.com', 'key': 1, 'name': 'Ece'}, 'message': 'Customer updated successfully'}
2024-08-23 16:19:40,698 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com', 'key': 2, 'name': 'Jane Smith'}, 'message': 'Customer updated successfully'}
2024-08-23 16:19:40,721 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Chicago', 'email': 'jim@gmail.com', 'key': 3, 'name': 'Jim Brown'}, 'message': 'Customer updated successfully'}
2024-08-23 16:19:40,746 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Houston', 'email': 'lisa@gmail.com', 'key': 4, 'name': 'Lisa White'}, 'message': 'Customer updated successfully'}
2024-08-23 16:19:40,771 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com', 'key': 5, 'name': 'Gary Black'}, 'message': 'Customer updated successfully'}
2024-08-23 16:27:24,484 - ERROR - Failed to store transaction. Status Code: 500. Response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;Response&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "cgdpNKC2BhYXROqtpFoz";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;Response&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2105512272816">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2105512273824">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2105512274256">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2105512274400">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2105512274544">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2105512274688">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2105512274832">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\Desktop\store\server.py"</cite>,
      line <em class="line">83</em>,
      in <code class="function">update_customers</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>response_data = json.dumps({</pre>
<pre class="line before"><span class="ws">            </span>&#34;message&#34;: &#34;Customer updated successfully&#34;,</pre>
<pre class="line before"><span class="ws">            </span>&#34;customer&#34;: customers_data[key]</pre>
<pre class="line before"><span class="ws">        </span>}, ensure_ascii=False)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
<span class="ws">        </span>       ^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(&#34;Invalid data received.&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Invalid data&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers&#39;, methods=[&#39;GET&#39;])  # Client&#39;ten gelen GET isteï¿½ini iï¿½ler</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;Response&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\Desktop\store\server.py&#34;, line 83, in update_customers
    return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name &#39;Response&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\Desktop\store\server.py", line 83, in update_customers
    return Response(response=response_data, status=200, mimetype='application/json')
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name 'Response' is not defined


-->

2024-08-23 16:27:24,654 - ERROR - Failed to store transaction. Status Code: 500. Response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;Response&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "cgdpNKC2BhYXROqtpFoz";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;Response&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2105512275552">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2105512275840">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2105512275984">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2105512276128">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2105512276272">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2105512276416">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2105512276560">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\Desktop\store\server.py"</cite>,
      line <em class="line">83</em>,
      in <code class="function">update_customers</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>response_data = json.dumps({</pre>
<pre class="line before"><span class="ws">            </span>&#34;message&#34;: &#34;Customer updated successfully&#34;,</pre>
<pre class="line before"><span class="ws">            </span>&#34;customer&#34;: customers_data[key]</pre>
<pre class="line before"><span class="ws">        </span>}, ensure_ascii=False)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
<span class="ws">        </span>       ^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(&#34;Invalid data received.&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Invalid data&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers&#39;, methods=[&#39;GET&#39;])  # Client&#39;ten gelen GET isteï¿½ini iï¿½ler</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;Response&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\Desktop\store\server.py&#34;, line 83, in update_customers
    return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name &#39;Response&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\Desktop\store\server.py", line 83, in update_customers
    return Response(response=response_data, status=200, mimetype='application/json')
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name 'Response' is not defined


-->

2024-08-23 16:27:24,811 - ERROR - Failed to store transaction. Status Code: 500. Response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;Response&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "cgdpNKC2BhYXROqtpFoz";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;Response&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2105512276992">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2105512276848">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2105512277136">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2105512277280">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2105512277424">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2105512277568">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2105512277712">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\Desktop\store\server.py"</cite>,
      line <em class="line">83</em>,
      in <code class="function">update_customers</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>response_data = json.dumps({</pre>
<pre class="line before"><span class="ws">            </span>&#34;message&#34;: &#34;Customer updated successfully&#34;,</pre>
<pre class="line before"><span class="ws">            </span>&#34;customer&#34;: customers_data[key]</pre>
<pre class="line before"><span class="ws">        </span>}, ensure_ascii=False)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
<span class="ws">        </span>       ^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(&#34;Invalid data received.&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Invalid data&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers&#39;, methods=[&#39;GET&#39;])  # Client&#39;ten gelen GET isteï¿½ini iï¿½ler</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;Response&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\Desktop\store\server.py&#34;, line 83, in update_customers
    return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name &#39;Response&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\Desktop\store\server.py", line 83, in update_customers
    return Response(response=response_data, status=200, mimetype='application/json')
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name 'Response' is not defined


-->

2024-08-23 16:27:25,001 - ERROR - Failed to store transaction. Status Code: 500. Response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;Response&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "cgdpNKC2BhYXROqtpFoz";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;Response&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2105512278000">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2105512278144">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2105512278288">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2105512278432">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2105512278576">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2105512278720">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2105512278864">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\Desktop\store\server.py"</cite>,
      line <em class="line">83</em>,
      in <code class="function">update_customers</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>response_data = json.dumps({</pre>
<pre class="line before"><span class="ws">            </span>&#34;message&#34;: &#34;Customer updated successfully&#34;,</pre>
<pre class="line before"><span class="ws">            </span>&#34;customer&#34;: customers_data[key]</pre>
<pre class="line before"><span class="ws">        </span>}, ensure_ascii=False)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
<span class="ws">        </span>       ^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(&#34;Invalid data received.&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Invalid data&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers&#39;, methods=[&#39;GET&#39;])  # Client&#39;ten gelen GET isteï¿½ini iï¿½ler</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;Response&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\Desktop\store\server.py&#34;, line 83, in update_customers
    return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name &#39;Response&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\Desktop\store\server.py", line 83, in update_customers
    return Response(response=response_data, status=200, mimetype='application/json')
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name 'Response' is not defined


-->

2024-08-23 16:27:25,204 - ERROR - Failed to store transaction. Status Code: 500. Response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;Response&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "cgdpNKC2BhYXROqtpFoz";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;Response&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2105512279152">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2105512279296">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2105512279440">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2105512279584">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2105512279728">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2105512279872">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2105513345088">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\Desktop\store\server.py"</cite>,
      line <em class="line">83</em>,
      in <code class="function">update_customers</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>response_data = json.dumps({</pre>
<pre class="line before"><span class="ws">            </span>&#34;message&#34;: &#34;Customer updated successfully&#34;,</pre>
<pre class="line before"><span class="ws">            </span>&#34;customer&#34;: customers_data[key]</pre>
<pre class="line before"><span class="ws">        </span>}, ensure_ascii=False)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
<span class="ws">        </span>       ^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(&#34;Invalid data received.&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Invalid data&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers&#39;, methods=[&#39;GET&#39;])  # Client&#39;ten gelen GET isteï¿½ini iï¿½ler</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;Response&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\Desktop\store\server.py&#34;, line 83, in update_customers
    return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name &#39;Response&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\Desktop\store\server.py", line 83, in update_customers
    return Response(response=response_data, status=200, mimetype='application/json')
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name 'Response' is not defined


-->

2024-08-23 16:28:47,517 - ERROR - Failed to store transaction. Status Code: 500. Response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;Response&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QnzvL8RWPh7PBGK9DjPM";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;Response&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2060595996288">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2060595996576">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2060595997008">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2060595997152">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2060595997296">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2060595997440">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2060595997584">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\Desktop\store\server.py"</cite>,
      line <em class="line">83</em>,
      in <code class="function">update_customers</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>response_data = json.dumps({</pre>
<pre class="line before"><span class="ws">            </span>&#34;message&#34;: &#34;Customer updated successfully&#34;,</pre>
<pre class="line before"><span class="ws">            </span>&#34;customer&#34;: customers_data[key]</pre>
<pre class="line before"><span class="ws">        </span>}, ensure_ascii=False)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
<span class="ws">        </span>       ^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(&#34;Invalid data received.&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Invalid data&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers&#39;, methods=[&#39;GET&#39;])  # Client&#39;ten gelen GET isteï¿½ini iï¿½ler</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;Response&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\Desktop\store\server.py&#34;, line 83, in update_customers
    return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name &#39;Response&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\Desktop\store\server.py", line 83, in update_customers
    return Response(response=response_data, status=200, mimetype='application/json')
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name 'Response' is not defined


-->

2024-08-23 16:28:47,630 - ERROR - Failed to store transaction. Status Code: 500. Response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;Response&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QnzvL8RWPh7PBGK9DjPM";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;Response&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2060595998304">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2060595998592">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2060595998736">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2060595998880">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2060595999024">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2060595999168">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2060595999312">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\Desktop\store\server.py"</cite>,
      line <em class="line">83</em>,
      in <code class="function">update_customers</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>response_data = json.dumps({</pre>
<pre class="line before"><span class="ws">            </span>&#34;message&#34;: &#34;Customer updated successfully&#34;,</pre>
<pre class="line before"><span class="ws">            </span>&#34;customer&#34;: customers_data[key]</pre>
<pre class="line before"><span class="ws">        </span>}, ensure_ascii=False)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
<span class="ws">        </span>       ^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(&#34;Invalid data received.&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Invalid data&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers&#39;, methods=[&#39;GET&#39;])  # Client&#39;ten gelen GET isteï¿½ini iï¿½ler</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;Response&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\Desktop\store\server.py&#34;, line 83, in update_customers
    return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name &#39;Response&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\Desktop\store\server.py", line 83, in update_customers
    return Response(response=response_data, status=200, mimetype='application/json')
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name 'Response' is not defined


-->

2024-08-23 16:28:47,783 - ERROR - Failed to store transaction. Status Code: 500. Response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;Response&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QnzvL8RWPh7PBGK9DjPM";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;Response&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2060595999600">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2060595999744">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2060595999888">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2060596000032">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2060596000176">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2060596000320">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2060596000464">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\Desktop\store\server.py"</cite>,
      line <em class="line">83</em>,
      in <code class="function">update_customers</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>response_data = json.dumps({</pre>
<pre class="line before"><span class="ws">            </span>&#34;message&#34;: &#34;Customer updated successfully&#34;,</pre>
<pre class="line before"><span class="ws">            </span>&#34;customer&#34;: customers_data[key]</pre>
<pre class="line before"><span class="ws">        </span>}, ensure_ascii=False)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
<span class="ws">        </span>       ^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(&#34;Invalid data received.&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Invalid data&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers&#39;, methods=[&#39;GET&#39;])  # Client&#39;ten gelen GET isteï¿½ini iï¿½ler</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;Response&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\Desktop\store\server.py&#34;, line 83, in update_customers
    return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name &#39;Response&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\Desktop\store\server.py", line 83, in update_customers
    return Response(response=response_data, status=200, mimetype='application/json')
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name 'Response' is not defined


-->

2024-08-23 16:28:47,935 - ERROR - Failed to store transaction. Status Code: 500. Response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;Response&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QnzvL8RWPh7PBGK9DjPM";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;Response&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2060596000752">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2060596000896">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2060596001040">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2060596001184">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2060596001328">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2060596001472">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2060596001616">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\Desktop\store\server.py"</cite>,
      line <em class="line">83</em>,
      in <code class="function">update_customers</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>response_data = json.dumps({</pre>
<pre class="line before"><span class="ws">            </span>&#34;message&#34;: &#34;Customer updated successfully&#34;,</pre>
<pre class="line before"><span class="ws">            </span>&#34;customer&#34;: customers_data[key]</pre>
<pre class="line before"><span class="ws">        </span>}, ensure_ascii=False)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
<span class="ws">        </span>       ^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(&#34;Invalid data received.&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Invalid data&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers&#39;, methods=[&#39;GET&#39;])  # Client&#39;ten gelen GET isteï¿½ini iï¿½ler</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;Response&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\Desktop\store\server.py&#34;, line 83, in update_customers
    return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name &#39;Response&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\Desktop\store\server.py", line 83, in update_customers
    return Response(response=response_data, status=200, mimetype='application/json')
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name 'Response' is not defined


-->

2024-08-23 16:28:48,151 - ERROR - Failed to store transaction. Status Code: 500. Response: <!doctype html>
<html lang=en>
  <head>
    <title>NameError: name &#39;Response&#39; is not defined
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "QnzvL8RWPh7PBGK9DjPM";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>NameError</h1>
<div class="detail">
  <p class="errormsg">NameError: name &#39;Response&#39; is not defined
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2060596001904">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2060596002048">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2060596002192">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2060596002336">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2060596002480">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2060596002624">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2060597067840">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\Desktop\store\server.py"</cite>,
      line <em class="line">83</em>,
      in <code class="function">update_customers</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>response_data = json.dumps({</pre>
<pre class="line before"><span class="ws">            </span>&#34;message&#34;: &#34;Customer updated successfully&#34;,</pre>
<pre class="line before"><span class="ws">            </span>&#34;customer&#34;: customers_data[key]</pre>
<pre class="line before"><span class="ws">        </span>}, ensure_ascii=False)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
<span class="ws">        </span>       ^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>logging.error(&#34;Invalid data received.&#34;)</pre>
<pre class="line after"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Invalid data&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers&#39;, methods=[&#39;GET&#39;])  # Client&#39;ten gelen GET isteï¿½ini iï¿½ler</pre></div>
</div>
</ul>
  <blockquote>NameError: name &#39;Response&#39; is not defined
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\Desktop\store\server.py&#34;, line 83, in update_customers
    return Response(response=response_data, status=200, mimetype=&#39;application/json&#39;)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name &#39;Response&#39; is not defined
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\Desktop\store\server.py", line 83, in update_customers
    return Response(response=response_data, status=200, mimetype='application/json')
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NameError: name 'Response' is not defined


-->

2024-08-23 16:29:51,525 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'ï¿½st', 'email': 'caa@gmail.com', 'key': 1, 'name': 'Ece'}, 'message': 'Customer updated successfully'}
2024-08-23 16:29:51,550 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com', 'key': 2, 'name': 'Jane Smith'}, 'message': 'Customer updated successfully'}
2024-08-23 16:29:51,583 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Chicago', 'email': 'jim@gmail.com', 'key': 3, 'name': 'Jim Brown'}, 'message': 'Customer updated successfully'}
2024-08-23 16:29:51,601 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Houston', 'email': 'lisa@gmail.com', 'key': 4, 'name': 'Lisa White'}, 'message': 'Customer updated successfully'}
2024-08-23 16:29:51,630 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com', 'key': 5, 'name': 'Gary Black'}, 'message': 'Customer updated successfully'}
2024-08-26 09:37:09,225 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'ï¿½st', 'email': 'caa@gmail.com', 'key': 1, 'name': 'Ece'}, 'message': 'Customer updated successfully'}
2024-08-26 09:37:09,239 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com', 'key': 2, 'name': 'Jane Smith'}, 'message': 'Customer updated successfully'}
2024-08-26 09:37:09,252 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Chicago', 'email': 'jim@gmail.com', 'key': 3, 'name': 'Jim Brown'}, 'message': 'Customer updated successfully'}
2024-08-26 09:37:09,267 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Houston', 'email': 'lisa@gmail.com', 'key': 4, 'name': 'Lisa White'}, 'message': 'Customer updated successfully'}
2024-08-26 09:37:09,283 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com', 'key': 5, 'name': 'Gary Black'}, 'message': 'Customer updated successfully'}
2024-08-26 09:44:25,440 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'ï¿½st', 'email': 'caa@gmail.com', 'key': 1, 'name': 'Ece'}, 'message': 'Customer updated successfully'}
2024-08-26 09:44:25,448 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com', 'key': 2, 'name': 'Jane Smith'}, 'message': 'Customer updated successfully'}
2024-08-26 09:44:25,460 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Chicago', 'email': 'jim@gmail.com', 'key': 3, 'name': 'Jim Brown'}, 'message': 'Customer updated successfully'}
2024-08-26 09:44:25,469 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Houston', 'email': 'lisa@gmail.com', 'key': 4, 'name': 'Lisa White'}, 'message': 'Customer updated successfully'}
2024-08-26 09:44:25,482 - INFO - Transaction stored successfully. Response: {'customer': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com', 'key': 5, 'name': 'Gary Black'}, 'message': 'Customer updated successfully'}
2024-08-26 10:15:34,873 - INFO - Transaction stored successfully for customer 1. Response: {'customer': {'customerCity': 'Ýst', 'email': 'caa@gmail.com', 'key': 1, 'name': 'Ece'}, 'message': 'Customer updated successfully'}
2024-08-26 10:15:34,883 - INFO - Transaction stored successfully for customer 2. Response: {'customer': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com', 'key': 2, 'name': 'Jane Smith'}, 'message': 'Customer updated successfully'}
2024-08-26 10:15:34,897 - INFO - Transaction stored successfully for customer 3. Response: {'customer': {'customerCity': 'Chicago', 'email': 'jim@gmail.com', 'key': 3, 'name': 'Jim Brown'}, 'message': 'Customer updated successfully'}
2024-08-26 10:15:34,907 - INFO - Transaction stored successfully for customer 4. Response: {'customer': {'customerCity': 'Houston', 'email': 'lisa@gmail.com', 'key': 4, 'name': 'Lisa White'}, 'message': 'Customer updated successfully'}
2024-08-26 10:15:34,921 - INFO - Transaction stored successfully for customer 5. Response: {'customer': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com', 'key': 5, 'name': 'Gary Black'}, 'message': 'Customer updated successfully'}
2024-08-26 10:15:34,922 - INFO - 5 data successfully transferred, 0 data failed to transfer.
2024-08-26 10:20:01,185 - INFO - Transaction stored successfully for customer 1. Response: {'customer': {'customerCity': 'Ýst', 'email': 'caa@gmail.com', 'key': 1, 'name': 'Ece'}, 'message': 'Customer updated successfully'}
2024-08-26 10:20:01,194 - INFO - Transaction stored successfully for customer 2. Response: {'customer': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com', 'key': 2, 'name': 'Jane Smith'}, 'message': 'Customer updated successfully'}
2024-08-26 10:20:01,204 - INFO - Transaction stored successfully for customer 3. Response: {'customer': {'customerCity': 'Chicago', 'email': 'jim@gmail.com', 'key': 3, 'name': 'Jim Brown'}, 'message': 'Customer updated successfully'}
2024-08-26 10:20:01,214 - INFO - Transaction stored successfully for customer 4. Response: {'customer': {'customerCity': 'Houston', 'email': 'lisa@gmail.com', 'key': 4, 'name': 'Lisa White'}, 'message': 'Customer updated successfully'}
2024-08-26 10:20:01,223 - INFO - Transaction stored successfully for customer 5. Response: {'customer': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com', 'key': 5, 'name': 'Gary Black'}, 'message': 'Customer updated successfully'}
2024-08-26 10:20:01,225 - INFO - 5 data successfully transferred, 0 data failed to transfer.
2024-08-26 10:24:25,116 - INFO - Transaction stored successfully for customer 1. Response: {'failure_count': 0, 'message': 'Customer update process completed', 'success_count': 1}
2024-08-26 10:24:25,125 - INFO - Transaction stored successfully for customer 2. Response: {'failure_count': 0, 'message': 'Customer update process completed', 'success_count': 1}
2024-08-26 10:24:25,134 - INFO - Transaction stored successfully for customer 3. Response: {'failure_count': 0, 'message': 'Customer update process completed', 'success_count': 1}
2024-08-26 10:24:25,146 - INFO - Transaction stored successfully for customer 4. Response: {'failure_count': 0, 'message': 'Customer update process completed', 'success_count': 1}
2024-08-26 10:24:25,155 - INFO - Transaction stored successfully for customer 5. Response: {'failure_count': 0, 'message': 'Customer update process completed', 'success_count': 1}
2024-08-26 10:24:25,156 - INFO - 5 data successfully transferred, 0 data failed to transfer.
2024-08-26 10:28:32,948 - ERROR - Failed to store transaction for customer 1. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:28:32,953 - ERROR - Failed to store transaction for customer 2. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:28:32,958 - ERROR - Failed to store transaction for customer 3. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:28:32,967 - ERROR - Failed to store transaction for customer 4. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:28:32,973 - ERROR - Failed to store transaction for customer 5. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:28:32,974 - INFO - 0 data successfully transferred, 5 data failed to transfer.
2024-08-26 10:28:32,974 - INFO - Failed data details:
2024-08-26 10:28:32,974 - INFO - {'customer_key': 1, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:28:32,974 - INFO - {'customer_key': 2, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:28:32,974 - INFO - {'customer_key': 3, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:28:32,974 - INFO - {'customer_key': 4, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:28:32,974 - INFO - {'customer_key': 5, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:29:21,896 - ERROR - Failed to store transaction for customer 1. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:29:21,901 - ERROR - Failed to store transaction for customer 2. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:29:21,905 - ERROR - Failed to store transaction for customer 3. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:29:21,911 - ERROR - Failed to store transaction for customer 4. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:29:21,919 - ERROR - Failed to store transaction for customer 5. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:29:21,922 - INFO - 0 data successfully transferred, 5 data failed to transfer.
2024-08-26 10:29:21,922 - INFO - Failed data details:
2024-08-26 10:29:21,922 - INFO - {'customer_key': 1, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:29:21,922 - INFO - {'customer_key': 2, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:29:21,922 - INFO - {'customer_key': 3, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:29:21,922 - INFO - {'customer_key': 4, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:29:21,922 - INFO - {'customer_key': 5, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:30:16,463 - ERROR - Failed to store transaction for customer 1. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:30:16,468 - ERROR - Failed to store transaction for customer 2. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:30:16,473 - ERROR - Failed to store transaction for customer 3. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:30:16,480 - ERROR - Failed to store transaction for customer 4. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:30:16,487 - ERROR - Failed to store transaction for customer 5. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:30:16,489 - INFO - 0 data successfully transferred, 5 data failed to transfer.
2024-08-26 10:30:16,489 - INFO - Failed data details:
2024-08-26 10:30:16,489 - INFO - {'customer_key': 1, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:30:16,489 - INFO - {'customer_key': 2, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:30:16,489 - INFO - {'customer_key': 3, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:30:16,489 - INFO - {'customer_key': 4, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:30:16,489 - INFO - {'customer_key': 5, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:31:12,245 - ERROR - Failed to store transaction for customer 1. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:31:12,251 - ERROR - Failed to store transaction for customer 2. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:31:12,255 - ERROR - Failed to store transaction for customer 3. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:31:12,262 - ERROR - Failed to store transaction for customer 4. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:31:12,267 - ERROR - Failed to store transaction for customer 5. Status Code: 404. Response: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

2024-08-26 10:31:12,269 - INFO - 0 data successfully transferred, 5 data failed to transfer.
2024-08-26 10:31:12,269 - INFO - Failed data details:
2024-08-26 10:31:12,269 - INFO - {'customer_key': 1, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:31:12,270 - INFO - {'customer_key': 2, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:31:12,270 - INFO - {'customer_key': 3, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:31:12,270 - INFO - {'customer_key': 4, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:31:12,270 - INFO - {'customer_key': 5, 'status_code': 404, 'response': '<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'}
2024-08-26 10:33:20,551 - INFO - Transaction stored successfully for customer 1. Response: {'customer': {'customerCity': 'Ýst', 'email': 'caa@gmail.com', 'key': 1, 'name': 'Ece'}, 'message': 'Customer updated successfully'}
2024-08-26 10:33:20,559 - INFO - Transaction stored successfully for customer 2. Response: {'customer': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com', 'key': 2, 'name': 'Jane Smith'}, 'message': 'Customer updated successfully'}
2024-08-26 10:33:20,567 - INFO - Transaction stored successfully for customer 3. Response: {'customer': {'customerCity': 'Chicago', 'email': 'jim@gmail.com', 'key': 3, 'name': 'Jim Brown'}, 'message': 'Customer updated successfully'}
2024-08-26 10:33:20,579 - INFO - Transaction stored successfully for customer 4. Response: {'customer': {'customerCity': 'Houston', 'email': 'lisa@gmail.com', 'key': 4, 'name': 'Lisa White'}, 'message': 'Customer updated successfully'}
2024-08-26 10:33:20,590 - INFO - Transaction stored successfully for customer 5. Response: {'customer': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com', 'key': 5, 'name': 'Gary Black'}, 'message': 'Customer updated successfully'}
2024-08-26 10:33:20,592 - INFO - 5 data successfully transferred, 0 data failed to transfer.
2024-08-26 10:38:16,395 - INFO - Transaction stored successfully for customer 1. Response: {'customer': {'customerCity': 'Ýst', 'email': 'caa@gmail.com', 'key': 1, 'name': 'Ece'}, 'message': 'Customer updated successfully'}
2024-08-26 10:38:16,405 - INFO - Transaction stored successfully for customer 2. Response: {'customer': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com', 'key': 2, 'name': 'Jane Smith'}, 'message': 'Customer updated successfully'}
2024-08-26 10:38:16,412 - INFO - Transaction stored successfully for customer 3. Response: {'customer': {'customerCity': 'Chicago', 'email': 'jim@gmail.com', 'key': 3, 'name': 'Jim Brown'}, 'message': 'Customer updated successfully'}
2024-08-26 10:38:16,421 - INFO - Transaction stored successfully for customer 4. Response: {'customer': {'customerCity': 'Houston', 'email': 'lisa@gmail.com', 'key': 4, 'name': 'Lisa White'}, 'message': 'Customer updated successfully'}
2024-08-26 10:38:16,428 - INFO - Transaction stored successfully for customer 5. Response: {'customer': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com', 'key': 5, 'name': 'Gary Black'}, 'message': 'Customer updated successfully'}
2024-08-26 10:38:16,429 - INFO - 5 data successfully transferred, 0 data failed to transfer.
2024-08-26 10:39:00,124 - INFO - Transaction stored successfully for customer 1. Response: {'customer': {'customerCity': 'Ýst', 'email': 'caa@gmail.com', 'key': 1, 'name': 'Ece'}, 'message': 'Customer updated successfully'}
2024-08-26 10:39:00,133 - INFO - Transaction stored successfully for customer 2. Response: {'customer': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com', 'key': 2, 'name': 'Jane Smith'}, 'message': 'Customer updated successfully'}
2024-08-26 10:39:00,143 - INFO - Transaction stored successfully for customer 3. Response: {'customer': {'customerCity': 'Chicago', 'email': 'jim@gmail.com', 'key': 3, 'name': 'Jim Brown'}, 'message': 'Customer updated successfully'}
2024-08-26 10:39:00,153 - INFO - Transaction stored successfully for customer 4. Response: {'customer': {'customerCity': 'Houston', 'email': 'lisa@gmail.com', 'key': 4, 'name': 'Lisa White'}, 'message': 'Customer updated successfully'}
2024-08-26 10:39:00,161 - INFO - Transaction stored successfully for customer 5. Response: {'customer': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com', 'key': 5, 'name': 'Gary Black'}, 'message': 'Customer updated successfully'}
2024-08-26 10:39:00,163 - INFO - 5 data successfully transferred, 0 data failed to transfer.
2024-08-26 12:02:37,316 - ERROR - Failed to store transaction for customer 1. Status Code: 500. Response: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;1&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "8yP8CZd9qxVJ2QFRxjyB";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;1&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1504132375472">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1504132376768">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1504132377200">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1504132377344">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1504132377488">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1504132377632">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1504132377776">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\Desktop\store\server.py"</cite>,
      line <em class="line">64</em>,
      in <code class="function">update_customer</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>@app.route(&#39;/customers/&lt;string:key&gt;&#39;, methods=[&#39;PUT&#39;])</pre>
<pre class="line before"><span class="ws"></span>def update_customer(key):</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>if data and update_customer_data(data):</pre>
<pre class="line current"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200
<span class="ws">        </span>                                                                        ^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>logging.error(f&#34;Invalid or incomplete data received for customer with key &#39;{key}&#39;.&#34;)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({&#34;message&#34;: &#34;Error updating customer&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers/batch&#39;, methods=[&#39;PUT&#39;])</pre>
<pre class="line after"><span class="ws"></span>def update_customers_batch():</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;1&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\Desktop\store\server.py&#34;, line 64, in update_customer
    return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200
                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyError: &#39;1&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\Desktop\store\server.py", line 64, in update_customer
    return jsonify({"message": "Customer updated successfully", "customer": customers_data[key]}), 200
                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyError: '1'


-->

2024-08-26 12:02:37,406 - ERROR - Failed to store transaction for customer 2. Status Code: 500. Response: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;2&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "8yP8CZd9qxVJ2QFRxjyB";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;2&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1504132378352">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1504132378640">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1504132378784">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1504132378928">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1504132379072">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1504132379216">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1504132379360">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\Desktop\store\server.py"</cite>,
      line <em class="line">64</em>,
      in <code class="function">update_customer</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>@app.route(&#39;/customers/&lt;string:key&gt;&#39;, methods=[&#39;PUT&#39;])</pre>
<pre class="line before"><span class="ws"></span>def update_customer(key):</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>if data and update_customer_data(data):</pre>
<pre class="line current"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200
<span class="ws">        </span>                                                                        ^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>logging.error(f&#34;Invalid or incomplete data received for customer with key &#39;{key}&#39;.&#34;)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({&#34;message&#34;: &#34;Error updating customer&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers/batch&#39;, methods=[&#39;PUT&#39;])</pre>
<pre class="line after"><span class="ws"></span>def update_customers_batch():</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;2&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\Desktop\store\server.py&#34;, line 64, in update_customer
    return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200
                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyError: &#39;2&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\Desktop\store\server.py", line 64, in update_customer
    return jsonify({"message": "Customer updated successfully", "customer": customers_data[key]}), 200
                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyError: '2'


-->

2024-08-26 12:02:37,461 - ERROR - Failed to store transaction for customer 3. Status Code: 500. Response: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;3&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "8yP8CZd9qxVJ2QFRxjyB";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;3&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1504132379648">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1504132379792">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1504132379936">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1504132380080">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1504132380224">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1504132380368">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1504132380512">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\Desktop\store\server.py"</cite>,
      line <em class="line">64</em>,
      in <code class="function">update_customer</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>@app.route(&#39;/customers/&lt;string:key&gt;&#39;, methods=[&#39;PUT&#39;])</pre>
<pre class="line before"><span class="ws"></span>def update_customer(key):</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>if data and update_customer_data(data):</pre>
<pre class="line current"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200
<span class="ws">        </span>                                                                        ^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>logging.error(f&#34;Invalid or incomplete data received for customer with key &#39;{key}&#39;.&#34;)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({&#34;message&#34;: &#34;Error updating customer&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers/batch&#39;, methods=[&#39;PUT&#39;])</pre>
<pre class="line after"><span class="ws"></span>def update_customers_batch():</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;3&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\Desktop\store\server.py&#34;, line 64, in update_customer
    return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200
                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyError: &#39;3&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\Desktop\store\server.py", line 64, in update_customer
    return jsonify({"message": "Customer updated successfully", "customer": customers_data[key]}), 200
                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyError: '3'


-->

2024-08-26 12:02:37,504 - ERROR - Failed to store transaction for customer 4. Status Code: 500. Response: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;4&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "8yP8CZd9qxVJ2QFRxjyB";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;4&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1504132380800">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1504132380944">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1504132381088">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1504132381232">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1504132381376">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1504132381520">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1504132381664">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\Desktop\store\server.py"</cite>,
      line <em class="line">64</em>,
      in <code class="function">update_customer</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>@app.route(&#39;/customers/&lt;string:key&gt;&#39;, methods=[&#39;PUT&#39;])</pre>
<pre class="line before"><span class="ws"></span>def update_customer(key):</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>if data and update_customer_data(data):</pre>
<pre class="line current"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200
<span class="ws">        </span>                                                                        ^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>logging.error(f&#34;Invalid or incomplete data received for customer with key &#39;{key}&#39;.&#34;)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({&#34;message&#34;: &#34;Error updating customer&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers/batch&#39;, methods=[&#39;PUT&#39;])</pre>
<pre class="line after"><span class="ws"></span>def update_customers_batch():</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;4&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\Desktop\store\server.py&#34;, line 64, in update_customer
    return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200
                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyError: &#39;4&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\Desktop\store\server.py", line 64, in update_customer
    return jsonify({"message": "Customer updated successfully", "customer": customers_data[key]}), 200
                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyError: '4'


-->

2024-08-26 12:02:37,555 - ERROR - Failed to store transaction for customer 5. Status Code: 500. Response: <!doctype html>
<html lang=en>
  <head>
    <title>KeyError: &#39;5&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "8yP8CZd9qxVJ2QFRxjyB";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>KeyError</h1>
<div class="detail">
  <p class="errormsg">KeyError: &#39;5&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-1504132381952">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1498</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-1504132382096">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1476</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-1504132382240">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1473</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-1504132382384">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">882</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-1504132382528">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">880</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-1504133414976">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">865</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-1504133415120">
  <h4>File <cite class="filename">"C:\Users\ecabukcu\Desktop\store\server.py"</cite>,
      line <em class="line">64</em>,
      in <code class="function">update_customer</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>@app.route(&#39;/customers/&lt;string:key&gt;&#39;, methods=[&#39;PUT&#39;])</pre>
<pre class="line before"><span class="ws"></span>def update_customer(key):</pre>
<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>if data and update_customer_data(data):</pre>
<pre class="line current"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200
<span class="ws">        </span>                                                                        ^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>logging.error(f&#34;Invalid or incomplete data received for customer with key &#39;{key}&#39;.&#34;)</pre>
<pre class="line after"><span class="ws">    </span>return jsonify({&#34;message&#34;: &#34;Error updating customer&#34;}), 400</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers/batch&#39;, methods=[&#39;PUT&#39;])</pre>
<pre class="line after"><span class="ws"></span>def update_customers_batch():</pre></div>
</div>
</ul>
  <blockquote>KeyError: &#39;5&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;C:\Users\ecabukcu\Desktop\store\server.py&#34;, line 64, in update_customer
    return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200
                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyError: &#39;5&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1498, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1476, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 1473, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\AppData\Local\Programs\Python\Python312\Lib\site-packages\flask\app.py", line 865, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ecabukcu\Desktop\store\server.py", line 64, in update_customer
    return jsonify({"message": "Customer updated successfully", "customer": customers_data[key]}), 200
                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyError: '5'


-->

2024-08-26 12:02:37,591 - INFO - 0 data successfully transferred, 5 data failed to transfer.
2024-08-26 12:02:37,591 - INFO - Failed data details:
2024-08-26 12:02:37,591 - INFO - {'customer_key': 1, 'status_code': 500, 'response': '<!doctype html>\n<html lang=en>\n  <head>\n    <title>KeyError: &#39;1&#39;\n // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "8yP8CZd9qxVJ2QFRxjyB";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>KeyError</h1>\n<div class="detail">\n  <p class="errormsg">KeyError: &#39;1&#39;\n</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  <h3></h3>\n  <ul><li><div class="frame" id="frame-1504132375472">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1498</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>\n<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>\n<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>\n<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)\n<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132376768">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1476</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line before"><span class="ws">                </span>error = e</pre>\n<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)\n<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n<pre class="line after"><span class="ws">                </span>raise</pre>\n<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132377200">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1473</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()\n<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>error = e</pre>\n<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132377344">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">882</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)\n<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132377488">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">880</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()\n<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132377632">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">865</em>,\n      in <code class="function">dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class="line before"><span class="ws">        </span>):</pre>\n<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132377776">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\Desktop\\store\\server.py"</cite>,\n      line <em class="line">64</em>,\n      in <code class="function">update_customer</code></h4>\n  <div class="source "><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span>@app.route(&#39;/customers/&lt;string:key&gt;&#39;, methods=[&#39;PUT&#39;])</pre>\n<pre class="line before"><span class="ws"></span>def update_customer(key):</pre>\n<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>\n<pre class="line before"><span class="ws">    </span>if data and update_customer_data(data):</pre>\n<pre class="line current"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200\n<span class="ws">        </span>                                                                        ^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">    </span>logging.error(f&#34;Invalid or incomplete data received for customer with key &#39;{key}&#39;.&#34;)</pre>\n<pre class="line after"><span class="ws">    </span>return jsonify({&#34;message&#34;: &#34;Error updating customer&#34;}), 400</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers/batch&#39;, methods=[&#39;PUT&#39;])</pre>\n<pre class="line after"><span class="ws"></span>def update_customers_batch():</pre></div>\n</div>\n</ul>\n  <blockquote>KeyError: &#39;1&#39;\n</blockquote>\n</div>\n\n<div class="plain">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 1498, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 1476, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 1473, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 882, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 880, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 865, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\Desktop\\store\\server.py&#34;, line 64, in update_customer\n    return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200\n                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\nKeyError: &#39;1&#39;\n</textarea>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 1498, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 1476, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 1473, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 882, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 880, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 865, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\Desktop\\store\\server.py", line 64, in update_customer\n    return jsonify({"message": "Customer updated successfully", "customer": customers_data[key]}), 200\n                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\nKeyError: \'1\'\n\n\n-->\n'}
2024-08-26 12:02:37,592 - INFO - {'customer_key': 2, 'status_code': 500, 'response': '<!doctype html>\n<html lang=en>\n  <head>\n    <title>KeyError: &#39;2&#39;\n // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "8yP8CZd9qxVJ2QFRxjyB";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>KeyError</h1>\n<div class="detail">\n  <p class="errormsg">KeyError: &#39;2&#39;\n</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  <h3></h3>\n  <ul><li><div class="frame" id="frame-1504132378352">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1498</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>\n<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>\n<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>\n<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)\n<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132378640">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1476</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line before"><span class="ws">                </span>error = e</pre>\n<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)\n<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n<pre class="line after"><span class="ws">                </span>raise</pre>\n<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132378784">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1473</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()\n<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>error = e</pre>\n<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132378928">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">882</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)\n<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132379072">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">880</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()\n<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132379216">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">865</em>,\n      in <code class="function">dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class="line before"><span class="ws">        </span>):</pre>\n<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132379360">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\Desktop\\store\\server.py"</cite>,\n      line <em class="line">64</em>,\n      in <code class="function">update_customer</code></h4>\n  <div class="source "><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span>@app.route(&#39;/customers/&lt;string:key&gt;&#39;, methods=[&#39;PUT&#39;])</pre>\n<pre class="line before"><span class="ws"></span>def update_customer(key):</pre>\n<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>\n<pre class="line before"><span class="ws">    </span>if data and update_customer_data(data):</pre>\n<pre class="line current"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200\n<span class="ws">        </span>                                                                        ^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">    </span>logging.error(f&#34;Invalid or incomplete data received for customer with key &#39;{key}&#39;.&#34;)</pre>\n<pre class="line after"><span class="ws">    </span>return jsonify({&#34;message&#34;: &#34;Error updating customer&#34;}), 400</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers/batch&#39;, methods=[&#39;PUT&#39;])</pre>\n<pre class="line after"><span class="ws"></span>def update_customers_batch():</pre></div>\n</div>\n</ul>\n  <blockquote>KeyError: &#39;2&#39;\n</blockquote>\n</div>\n\n<div class="plain">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 1498, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 1476, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 1473, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 882, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 880, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 865, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\Desktop\\store\\server.py&#34;, line 64, in update_customer\n    return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200\n                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\nKeyError: &#39;2&#39;\n</textarea>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 1498, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 1476, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 1473, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 882, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 880, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 865, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\Desktop\\store\\server.py", line 64, in update_customer\n    return jsonify({"message": "Customer updated successfully", "customer": customers_data[key]}), 200\n                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\nKeyError: \'2\'\n\n\n-->\n'}
2024-08-26 12:02:37,592 - INFO - {'customer_key': 3, 'status_code': 500, 'response': '<!doctype html>\n<html lang=en>\n  <head>\n    <title>KeyError: &#39;3&#39;\n // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "8yP8CZd9qxVJ2QFRxjyB";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>KeyError</h1>\n<div class="detail">\n  <p class="errormsg">KeyError: &#39;3&#39;\n</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  <h3></h3>\n  <ul><li><div class="frame" id="frame-1504132379648">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1498</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>\n<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>\n<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>\n<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)\n<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132379792">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1476</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line before"><span class="ws">                </span>error = e</pre>\n<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)\n<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n<pre class="line after"><span class="ws">                </span>raise</pre>\n<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132379936">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1473</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()\n<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>error = e</pre>\n<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132380080">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">882</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)\n<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132380224">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">880</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()\n<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132380368">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">865</em>,\n      in <code class="function">dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class="line before"><span class="ws">        </span>):</pre>\n<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132380512">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\Desktop\\store\\server.py"</cite>,\n      line <em class="line">64</em>,\n      in <code class="function">update_customer</code></h4>\n  <div class="source "><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span>@app.route(&#39;/customers/&lt;string:key&gt;&#39;, methods=[&#39;PUT&#39;])</pre>\n<pre class="line before"><span class="ws"></span>def update_customer(key):</pre>\n<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>\n<pre class="line before"><span class="ws">    </span>if data and update_customer_data(data):</pre>\n<pre class="line current"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200\n<span class="ws">        </span>                                                                        ^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">    </span>logging.error(f&#34;Invalid or incomplete data received for customer with key &#39;{key}&#39;.&#34;)</pre>\n<pre class="line after"><span class="ws">    </span>return jsonify({&#34;message&#34;: &#34;Error updating customer&#34;}), 400</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers/batch&#39;, methods=[&#39;PUT&#39;])</pre>\n<pre class="line after"><span class="ws"></span>def update_customers_batch():</pre></div>\n</div>\n</ul>\n  <blockquote>KeyError: &#39;3&#39;\n</blockquote>\n</div>\n\n<div class="plain">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 1498, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 1476, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 1473, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 882, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 880, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 865, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\Desktop\\store\\server.py&#34;, line 64, in update_customer\n    return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200\n                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\nKeyError: &#39;3&#39;\n</textarea>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 1498, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 1476, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 1473, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 882, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 880, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 865, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\Desktop\\store\\server.py", line 64, in update_customer\n    return jsonify({"message": "Customer updated successfully", "customer": customers_data[key]}), 200\n                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\nKeyError: \'3\'\n\n\n-->\n'}
2024-08-26 12:02:37,592 - INFO - {'customer_key': 4, 'status_code': 500, 'response': '<!doctype html>\n<html lang=en>\n  <head>\n    <title>KeyError: &#39;4&#39;\n // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "8yP8CZd9qxVJ2QFRxjyB";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>KeyError</h1>\n<div class="detail">\n  <p class="errormsg">KeyError: &#39;4&#39;\n</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  <h3></h3>\n  <ul><li><div class="frame" id="frame-1504132380800">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1498</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>\n<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>\n<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>\n<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)\n<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132380944">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1476</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line before"><span class="ws">                </span>error = e</pre>\n<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)\n<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n<pre class="line after"><span class="ws">                </span>raise</pre>\n<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132381088">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1473</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()\n<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>error = e</pre>\n<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132381232">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">882</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)\n<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132381376">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">880</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()\n<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132381520">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">865</em>,\n      in <code class="function">dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class="line before"><span class="ws">        </span>):</pre>\n<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132381664">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\Desktop\\store\\server.py"</cite>,\n      line <em class="line">64</em>,\n      in <code class="function">update_customer</code></h4>\n  <div class="source "><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span>@app.route(&#39;/customers/&lt;string:key&gt;&#39;, methods=[&#39;PUT&#39;])</pre>\n<pre class="line before"><span class="ws"></span>def update_customer(key):</pre>\n<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>\n<pre class="line before"><span class="ws">    </span>if data and update_customer_data(data):</pre>\n<pre class="line current"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200\n<span class="ws">        </span>                                                                        ^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">    </span>logging.error(f&#34;Invalid or incomplete data received for customer with key &#39;{key}&#39;.&#34;)</pre>\n<pre class="line after"><span class="ws">    </span>return jsonify({&#34;message&#34;: &#34;Error updating customer&#34;}), 400</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers/batch&#39;, methods=[&#39;PUT&#39;])</pre>\n<pre class="line after"><span class="ws"></span>def update_customers_batch():</pre></div>\n</div>\n</ul>\n  <blockquote>KeyError: &#39;4&#39;\n</blockquote>\n</div>\n\n<div class="plain">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 1498, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 1476, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 1473, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 882, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 880, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 865, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\Desktop\\store\\server.py&#34;, line 64, in update_customer\n    return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200\n                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\nKeyError: &#39;4&#39;\n</textarea>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 1498, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 1476, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 1473, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 882, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 880, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 865, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\Desktop\\store\\server.py", line 64, in update_customer\n    return jsonify({"message": "Customer updated successfully", "customer": customers_data[key]}), 200\n                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\nKeyError: \'4\'\n\n\n-->\n'}
2024-08-26 12:02:37,593 - INFO - {'customer_key': 5, 'status_code': 500, 'response': '<!doctype html>\n<html lang=en>\n  <head>\n    <title>KeyError: &#39;5&#39;\n // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "8yP8CZd9qxVJ2QFRxjyB";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>KeyError</h1>\n<div class="detail">\n  <p class="errormsg">KeyError: &#39;5&#39;\n</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  <h3></h3>\n  <ul><li><div class="frame" id="frame-1504132381952">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1498</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>\n<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>\n<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>\n<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)\n<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132382096">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1476</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line before"><span class="ws">                </span>error = e</pre>\n<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)\n<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n<pre class="line after"><span class="ws">                </span>raise</pre>\n<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132382240">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1473</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()\n<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>error = e</pre>\n<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132382384">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">882</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)\n<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504132382528">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">880</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()\n<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504133414976">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">865</em>,\n      in <code class="function">dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class="line before"><span class="ws">        </span>):</pre>\n<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-1504133415120">\n  <h4>File <cite class="filename">"C:\\Users\\ecabukcu\\Desktop\\store\\server.py"</cite>,\n      line <em class="line">64</em>,\n      in <code class="function">update_customer</code></h4>\n  <div class="source "><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span>@app.route(&#39;/customers/&lt;string:key&gt;&#39;, methods=[&#39;PUT&#39;])</pre>\n<pre class="line before"><span class="ws"></span>def update_customer(key):</pre>\n<pre class="line before"><span class="ws">    </span>data = request.get_json()</pre>\n<pre class="line before"><span class="ws">    </span>if data and update_customer_data(data):</pre>\n<pre class="line current"><span class="ws">        </span>return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200\n<span class="ws">        </span>                                                                        ^^^^^^^^^^^^^^^^^^^</pre>\n<pre class="line after"><span class="ws">    </span>logging.error(f&#34;Invalid or incomplete data received for customer with key &#39;{key}&#39;.&#34;)</pre>\n<pre class="line after"><span class="ws">    </span>return jsonify({&#34;message&#34;: &#34;Error updating customer&#34;}), 400</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>@app.route(&#39;/customers/batch&#39;, methods=[&#39;PUT&#39;])</pre>\n<pre class="line after"><span class="ws"></span>def update_customers_batch():</pre></div>\n</div>\n</ul>\n  <blockquote>KeyError: &#39;5&#39;\n</blockquote>\n</div>\n\n<div class="plain">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 1498, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 1476, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 1473, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 882, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 880, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py&#34;, line 865, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;C:\\Users\\ecabukcu\\Desktop\\store\\server.py&#34;, line 64, in update_customer\n    return jsonify({&#34;message&#34;: &#34;Customer updated successfully&#34;, &#34;customer&#34;: customers_data[key]}), 200\n                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\nKeyError: &#39;5&#39;\n</textarea>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 1498, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 1476, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 1473, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 882, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 880, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\flask\\app.py", line 865, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "C:\\Users\\ecabukcu\\Desktop\\store\\server.py", line 64, in update_customer\n    return jsonify({"message": "Customer updated successfully", "customer": customers_data[key]}), 200\n                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\nKeyError: \'5\'\n\n\n-->\n'}
2024-08-26 12:09:36,416 - INFO - Transaction stored successfully for customer 1. Response: {'customer': {'customerCity': 'Istanbul', 'email': 'ece@gmail.com', 'key': 1, 'name': 'Ece'}, 'message': 'Customer updated successfully'}
2024-08-26 12:09:36,425 - INFO - Transaction stored successfully for customer 2. Response: {'customer': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com', 'key': 2, 'name': 'Jane Smith'}, 'message': 'Customer updated successfully'}
2024-08-26 12:09:36,435 - INFO - Transaction stored successfully for customer 3. Response: {'customer': {'customerCity': 'Chicago', 'email': 'jim@gmail.com', 'key': 3, 'name': 'Jim Brown'}, 'message': 'Customer updated successfully'}
2024-08-26 12:09:36,446 - INFO - Transaction stored successfully for customer 4. Response: {'customer': {'customerCity': 'Houston', 'email': 'lisa@gmail.com', 'key': 4, 'name': 'Lisa White'}, 'message': 'Customer updated successfully'}
2024-08-26 12:09:36,456 - INFO - Transaction stored successfully for customer 5. Response: {'customer': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com', 'key': 5, 'name': 'Gary Black'}, 'message': 'Customer updated successfully'}
2024-08-26 12:09:36,457 - INFO - 5 data successfully transferred, 0 data failed to transfer.
2024-08-26 12:14:52,750 - INFO - Transaction stored successfully for customer 1. Response: {'customer': {'customerCity': 'Istanbul', 'email': 'ece@gmail.com', 'key': '1', 'name': 'Ece'}, 'message': 'Customer updated successfully'}
2024-08-26 12:14:52,761 - INFO - Transaction stored successfully for customer 2. Response: {'customer': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com', 'key': '2', 'name': 'Jane Smith'}, 'message': 'Customer updated successfully'}
2024-08-26 12:14:52,770 - INFO - Transaction stored successfully for customer 3. Response: {'customer': {'customerCity': 'Chicago', 'email': 'jim@gmail.com', 'key': '3', 'name': 'Jim Brown'}, 'message': 'Customer updated successfully'}
2024-08-26 12:14:52,779 - INFO - Transaction stored successfully for customer 4. Response: {'customer': {'customerCity': 'Houston', 'email': 'lisa@gmail.com', 'key': '4', 'name': 'Lisa White'}, 'message': 'Customer updated successfully'}
2024-08-26 12:14:52,789 - INFO - Transaction stored successfully for customer 5. Response: {'customer': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com', 'key': '5', 'name': 'Gary Black'}, 'message': 'Customer updated successfully'}
2024-08-26 12:14:52,791 - INFO - 5 data successfully transferred, 0 data failed to transfer.
2024-08-26 14:59:09,522 - INFO - Transaction stored successfully for customer 1. Response: {'customer': {'customerCity': 'Sakarya', 'email': 'ece@gmail.com', 'key': '1', 'name': 'Ece'}, 'message': 'Customer updated successfully'}
2024-08-26 14:59:09,532 - INFO - Transaction stored successfully for customer 2. Response: {'customer': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com', 'key': '2', 'name': 'Jane Smith'}, 'message': 'Customer updated successfully'}
2024-08-26 14:59:09,544 - INFO - Transaction stored successfully for customer 3. Response: {'customer': {'customerCity': 'Chicago', 'email': 'jim@gmail.com', 'key': '3', 'name': 'Jim Brown'}, 'message': 'Customer updated successfully'}
2024-08-26 14:59:09,554 - INFO - Transaction stored successfully for customer 4. Response: {'customer': {'customerCity': 'Houston', 'email': 'lisa@gmail.com', 'key': '4', 'name': 'Lisa White'}, 'message': 'Customer updated successfully'}
2024-08-26 14:59:09,564 - INFO - Transaction stored successfully for customer 5. Response: {'customer': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com', 'key': '5', 'name': 'Gary Black'}, 'message': 'Customer updated successfully'}
2024-08-26 14:59:09,565 - INFO - 5 data successfully transferred, 0 data failed to transfer.
2024-08-26 17:06:08,091 - INFO - Transaction stored successfully for customer 1. Response: {'customer': {'customerCity': 'Sakarya', 'email': 'ece@gmail.com', 'key': '1', 'name': 'Ece'}, 'message': 'Customer updated successfully'}
2024-08-26 17:06:08,120 - INFO - Transaction stored successfully for customer 2. Response: {'customer': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com', 'key': '2', 'name': 'Jane Smith'}, 'message': 'Customer updated successfully'}
2024-08-26 17:06:08,146 - INFO - Transaction stored successfully for customer 3. Response: {'customer': {'customerCity': 'Chicago', 'email': 'jim@gmail.com', 'key': '3', 'name': 'Jim Brown'}, 'message': 'Customer updated successfully'}
2024-08-26 17:06:08,173 - INFO - Transaction stored successfully for customer 4. Response: {'customer': {'customerCity': 'Houston', 'email': 'lisa@gmail.com', 'key': '4', 'name': 'Lisa White'}, 'message': 'Customer updated successfully'}
2024-08-26 17:06:08,196 - INFO - Transaction stored successfully for customer 5. Response: {'customer': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com', 'key': '5', 'name': 'Gary Black'}, 'message': 'Customer updated successfully'}
2024-08-26 17:06:08,199 - INFO - 5 data successfully transferred, 0 data failed to transfer.
2024-08-26 17:11:46,760 - INFO - Transaction stored successfully for customer 1. Response: {'customer': {'customerCity': 'Sakarya', 'email': 'ece@gmail.com', 'key': '1', 'name': 'Ece'}, 'message': 'Customer updated successfully'}
2024-08-26 17:11:46,791 - INFO - Transaction stored successfully for customer 2. Response: {'customer': {'customerCity': 'Los Angeles', 'email': 'hane@gmail.com', 'key': '2', 'name': 'Jane Smith'}, 'message': 'Customer updated successfully'}
2024-08-26 17:11:46,812 - INFO - Transaction stored successfully for customer 3. Response: {'customer': {'customerCity': 'Chicago', 'email': 'jim@gmail.com', 'key': '3', 'name': 'Jim Brown'}, 'message': 'Customer updated successfully'}
2024-08-26 17:11:46,829 - INFO - Transaction stored successfully for customer 4. Response: {'customer': {'customerCity': 'Houston', 'email': 'lisa@gmail.com', 'key': '4', 'name': 'Lisa White'}, 'message': 'Customer updated successfully'}
2024-08-26 17:11:46,846 - INFO - Transaction stored successfully for customer 5. Response: {'customer': {'customerCity': 'Phoenix', 'email': 'gary@gmail.com', 'key': '5', 'name': 'Gary Black'}, 'message': 'Customer updated successfully'}
2024-08-26 17:11:46,848 - INFO - 5 data successfully transferred, 0 data failed to transfer.
